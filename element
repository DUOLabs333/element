#!/usr/bin/env python3





import types
import sys
import base64
pyparsing_module=types.ModuleType("pyparsing")
#setattr(pyparsing_module,"__file__",__file__)
exec(base64.b64decode(b'').decode("utf-8"),pyparsing_module.__dict__)
#sys.modules["pyparsing"]=pyparsing_module



from pyparsing import (Suppress, Word, nums, alphas, Regex, Forward, Group, 

						Optional, OneOrMore, ParseResults)





from collections import defaultdict




import base64
pt = base64.b64decode(b'')




import base64
table = base64.b64decode(b'IF9fX19fICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fX19fCnwgIDEgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDIgIHwKfCAgSCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgSGUgfAp8X19fX198X19fX18gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX19fX19fX19fX19fX19fX19fX19fX19fX19fX198X19fX198CnwgIDMgIHwgIDQgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDUgIHwgIDYgIHwgIDcgIHwgIDggIHwgIDkgIHwgIDEwIHwKfCAgTGkgfCAgQmUgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgQiAgfCAgQyAgfCAgTiAgfCAgTyAgfCAgRiAgfCAgTmUgfAp8X19fX198X19fX198ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198CnwgIDExIHwgIDEyIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgIDEzIHwgIDE0IHwgIDE1IHwgIDE2IHwgIDE3IHwgIDE4IHwKfCAgTmEgfCAgTWcgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgQWwgfCAgU2kgfCAgUCAgfCAgUyAgfCAgQ2wgfCAgQXIgfAp8X19fX198X19fX198X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198CnwgIDE5IHwgIDIwIHwgIDIxIHwgIDIyIHwgIDIzIHwgIDI0IHwgIDI1IHwgIDI2IHwgIDI3IHwgIDI4IHwgIDI5IHwgIDMwIHwgIDMxIHwgIDMyIHwgIDMzIHwgIDM0IHwgIDM1IHwgIDM2IHwKfCAgSyAgfCAgQ2EgfCAgU2MgfCAgVGkgfCAgViAgfCAgQ3IgfCAgTW4gfCAgRmUgfCAgQ28gfCAgTmkgfCAgQ3UgfCAgWm4gfCAgR2EgfCAgR2UgfCAgQXMgfCAgU2UgfCAgQnIgfCAgS3IgfAp8X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198CnwgIDM3IHwgIDM4IHwgIDM5IHwgIDQwIHwgIDQxIHwgIDQyIHwgIDQzIHwgIDQ0IHwgIDQ1IHwgIDQ2IHwgIDQ3IHwgIDQ4IHwgIDQ5IHwgIDUwIHwgIDUxIHwgIDUyIHwgIDUzIHwgIDU0IHwKfCAgUmIgfCAgU3IgfCAgWSAgfCAgWnIgfCAgTmIgfCAgTW8gfCAgVGMgfCAgUnUgfCAgUmggfCAgUGQgfCAgQWcgfCAgQ2QgfCAgSW4gfCAgU24gfCAgU2IgfCAgVGUgfCAgSSAgfCAgWGUgfAp8X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198CnwgIDU1IHwgIDU2IHwgIDU3IFwgIDcyIHwgIDczIHwgIDc0IHwgIDc1IHwgIDc2IHwgIDc3IHwgIDc4IHwgIDc5IHwgIDgwIHwgIDgxIHwgIDgyIHwgIDgzIHwgIDg0IHwgIDg1IHwgIDg2IHwKfCAgQ3MgfCAgQmEgfCAgTGEgLyAgSGYgfCAgVGEgfCAgVyAgfCAgUmUgfCAgT3MgfCAgSXIgfCAgUHQgfCAgQXUgfCAgSGcgfCAgVGwgfCAgUGIgfCAgQmkgfCAgUG8gfCAgQXQgfCAgUm4gfAp8X19fX198X19fX198X19fX19cX19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198CnwgIDg3IHwgIDg4IHwgIDg5IC8gMTA0IHwgMTA1IHwgMTA2IHwgMTA3IHwgMTA4IHwgMTA5IHwgMTEwIHwgMTExIHwgMTEyIHwgMTEzIHwgMTE0IHwgMTE1IHwgMTE2IHwgMTE3IHwgMTE4IHwKfCAgRnIgfCAgUmEgfCAgQWMgXCAgUmYgfCAgRGIgfCAgU2cgfCAgQmggfCAgSHMgfCAgTXQgfCAgRHMgfCAgUmcgfCAgQ24gfCAgTmggfCAgRmwgfCAgTWMgfCAgTHYgfCAgVHMgfCAgT2cgfAp8X19fX198X19fX198X19fX18vX19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198CgoJCQkJICBfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX18gCgkJCQkgIFwgIDU4IHwgIDU5IHwgIDYwIHwgIDYxIHwgIDYyIHwgIDYzIHwgIDY0IHwgIDY1IHwgIDY2IHwgIDY3IHwgIDY4IHwgIDY5IHwgIDcwIHwgIDcxIFwKCQkJCSAgLyAgQ2UgfCAgUHIgfCAgTmQgfCAgUG0gfCAgU20gfCAgRXUgfCAgR2QgfCAgVGIgfCAgRHkgfCAgSG8gfCAgRXIgfCAgVG0gfCAgWWIgfCAgTHUgLwoJCQkJICBcX19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX19cCgkJCQkgIC8gIDkwIHwgIDkxIHwgIDkyIHwgIDkzIHwgIDk0IHwgIDk1IHwgIDk2IHwgIDk3IHwgIDk4IHwgIDk5IHwgMTAwIHwgMTAxIHwgMTAyIHwgMTAzIC8KCQkJCSAgXCAgVGggfCAgUGEgfCAgVSAgfCAgTnAgfCAgUHUgfCAgQW0gfCAgQ20gfCAgQmsgfCAgQ2YgfCAgRXMgfCAgRm0gfCAgTWQgfCAgTm8gfCAgTHIgXAoJCQkJICAvX19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX198X19fX18vCg==')



table=table.decode()





import json

import readline

from pprint import pprint

import copy

import sys

import math

from decimal import Decimal

pt=json.loads(pt)



elements=list(map(str.lower, list(pt.keys())))



symbols=[pt[_]["Symbol"].lower() for _ in list(pt.keys())]



keepnames=["Symbol","Protons","Electrons","Neutrons", "Period", "Group", "Electronic configuration","Atomic mass", "Atomic number", "Atomic radius", "Density (g/cm^3)", "Specific heat (J/K)", "Electronegativity", "Melting point (K)", "Boiling point (K)", "First ionization (eV)"]



keepkeys=["Symbol","NumberofProtons","NumberofElectrons","NumberofNeutrons","Period","Group","ElectronicConfiguration", "AtomicMass","AtomicNumber","AtomicRadius","Density","SpecificHeat","Electronegativity","MeltingPoint","BoilingPoint","FirstIonization"]



def getResult(Element):

	

	if isinstance(Element,str):

		temp_dict={}

		for key in keepkeys:

			temp_dict[keepnames[keepkeys.index(key)]]=pt[Element][key]

			

		result={}

		result['Name']=Element

		result=result | temp_dict

	else:

		result={}

		result['Compound']=''.join([str(_[0])+str(_[1]) for _ in Element])

		result['Molar Mass']=float(sum([Decimal(_[1]*float(getResult(parseElement(_[0]))['Atomic mass'])) for _ in Element]))

	return result

	



def parseElement(Input):

	if Input.lower() in elements:

		return Input.title()

	elif Input.lower() in symbols:

		return elements[symbols.index(Input.lower())].title()

	else:

		raise Exception



def parseCompound(Input):

	LPAR,RPAR = map(Suppress,"()")

	integer = Word(nums)

	

	# add parse action to convert integers to ints, to support doing addition 

	# and multiplication at parse time

	integer.setParseAction(lambda dummy1,dummy2,t:int(t[0]))

	

	element = Word(alphas.upper(), alphas.lower())

	# or if you want to be more specific, use this Regex

	# element = Regex(r"A[cglmrstu]|B[aehikr]?|C[adeflmorsu]?|D[bsy]|E[rsu]|F[emr]?|"

	#                 "G[ade]|H[efgos]?|I[nr]?|Kr?|L[airu]|M[dgnot]|N[abdeiop]?|"

	#                 "Os?|P[abdmortu]?|R[abefghnu]|S[bcegimnr]?|T[abcehilm]|"

	#                 "Uu[bhopqst]|U|V|W|Xe|Yb?|Z[nr]")

	

	# forward declare 'formula' so it can be used in definition of 'term'

	formula = Forward()

	

	term = Group((element | Group(LPAR + formula + RPAR)("subgroup")) + 

					Optional(integer, default=1)("mult"))

	

	# define contents of a formula as one or more terms

	formula << OneOrMore(term)

	

	

	# add parse actions for parse-time processing

	

	# parse action to multiply out subgroups

	def multiplyContents(dummy1,dummy2,tokens):

		t = tokens[0]

		# if these tokens contain a subgroup, then use multiplier to

		# extend counts of all elements in the subgroup

		if t.subgroup:

			mult = t.mult

			for term in t.subgroup:

				term[1] *= mult

			return t.subgroup

	term.setParseAction(multiplyContents)

	

	# add parse action to sum up multiple references to the same element

	def sumByElement(w,x,tokens):

		elementsList = [t[0] for t in tokens]

	

		# construct set to see if there are duplicates

		duplicates = len(elementsList) > len(set(elementsList))

	

		# if there are duplicate element names, sum up by element and

		# return a new nested ParseResults

		if duplicates:

			ctr = defaultdict(int)

			for t in tokens:

				ctr[t[0]] += t[1]

			return ParseResults([ParseResults([k,v]) for k,v in ctr.items()])

	formula.setParseAction(sumByElement)

	return formula.parseString(Input)



def parseInput(Input):

	parseCompound(Input)

	try:

		if Input.islower():

			result=parseElement(Input)

		else:

			result=parseCompound(Input)

	except:

		print("Incorrect Element/Molecule")

		return

	pprint(getResult(result),sort_dicts=False,width=1)

	

def repl():

	while True:

		Input=input('>> ')

		parseInput(Input)



if len(sys.argv)==1:

	try:

	   repl()

	except (EOFError,KeyboardInterrupt):

		print()

		exit()

else:

	if sys.argv[-1]=="--table":

		print(table)

		exit()

	Input=sys.argv[1]

	parseInput(Input)



	